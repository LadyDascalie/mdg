// Code generated by go-bindata.
// sources:
// github-markdown.html
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubMarkdownHtml = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xdc\x59\xdb\x8e\xdb\x36\x13\xbe\xcf\x53\xcc\x8f\xe0\x07\xda\x46\xda\x4a\x96\xec\xa4\x6a\xb0\x37\xbd\xe9\x6b\xd0\x22\x6d\x12\xa1\x49\x95\xa2\xb3\xbb\x2d\xf2\xee\x85\x48\xdb\xe2\x49\xb2\xb4\xcd\xf6\xa2\x5e\xc0\x58\x8d\x38\xc3\x99\x6f\x8e\xa4\x3f\xf7\xfa\x85\x93\xc7\x77\x00\x00\x7b\x89\x5f\xe0\x2f\xf3\xef\xf0\x39\x48\xa1\xf3\x03\x3a\x31\xfe\xd2\xc0\xef\x84\x7f\x25\x9a\xb5\x28\x03\xa4\x18\xe2\x19\xf4\x48\xf4\x79\x4f\x14\x3b\xfc\xea\xb3\xf4\xec\x4f\xd2\x40\x59\x77\xcf\xe3\x0b\xce\x04\xc9\x29\x61\x47\xaa\x1b\x28\x1f\x76\xe3\x9b\x0e\x61\xcc\xc4\x31\xd7\xb2\x6b\xa0\x2c\x5c\xa6\xeb\xab\xbd\xd4\x5a\x9e\xc2\xb7\x7b\xd4\x7e\x39\x2a\x79\x16\x38\x6f\x25\x97\xaa\x81\x27\xca\x34\x89\xd8\x1b\xa8\x3c\xbe\xcb\xe2\xf7\x55\x55\x59\xe2\xb7\x77\xa3\xf5\x8f\xf0\x53\x73\x60\xaa\xd7\x79\x4b\x19\xc7\x0e\x1a\x27\xa4\x8e\x4c\x58\x35\x0b\xf8\x1f\x3b\x75\x52\x69\x24\x74\x5a\x06\x47\xd3\x22\xae\xe6\x4c\x4a\x41\x0e\xcf\x55\xdb\xba\xfc\x54\xfd\x56\x8f\x56\x68\xf2\xac\x73\x4c\x5a\xa9\x90\x66\x52\x34\x20\xa4\x20\xbe\x94\x07\xb4\xef\x89\xd0\x09\x61\x6d\x5b\x14\x45\x11\xae\x16\x2d\x95\xca\x59\x8d\x59\xdf\x71\xf4\xd2\xc0\x9e\xcb\xf6\x4b\xec\x16\x4e\x0e\x3a\x04\xf7\x62\xa2\x7d\x95\x07\xc0\x9f\x55\x3f\x6c\xdf\x49\x26\x34\x51\x8e\x40\xd9\x33\x6b\x04\xda\xf7\x92\x9f\x5d\x27\x5a\xbc\x9d\x40\x32\x92\x1d\xc2\x0d\x4d\xcf\x1c\x5a\x66\x40\x37\x19\xd0\x2a\x03\x5a\x67\x40\xb7\x19\xd0\x5d\xe4\x8b\x06\x36\x45\xf7\x0c\x45\x3a\xf0\xbc\x7d\x4c\x68\x3f\x5d\x22\x78\x2f\x39\x1e\x5f\xe5\x4f\x64\xff\x85\xe9\xdc\x46\xff\x49\x4a\x4d\x0d\x37\x12\x9a\x21\xce\x50\x4f\x70\x8c\xc2\xe0\xc0\x14\x04\x8a\x70\xa4\xd9\x57\xdf\x97\x74\xe3\x46\x65\x06\xb4\x9c\x7b\x86\x0f\x17\xdb\x83\x45\x75\xf0\xbc\x0d\x9e\x77\x4b\x42\x7f\x22\x73\x43\xf8\x1b\x2a\xbf\x12\x75\x0b\xab\xc1\x1b\x31\xa9\x8a\x49\x75\x4c\xda\xc6\xa4\x5d\x40\x72\x94\xbd\x9f\x18\xb4\x04\xad\x07\xcc\xa0\x95\x98\x84\x05\xcf\x56\x2f\x26\x28\x51\x4c\x07\x4e\xb0\x7c\x9b\xb5\x7c\x95\xe5\xab\xd6\xf2\xd5\x96\xaf\x5e\xcb\xb7\xb5\x7c\xdb\xb5\x7c\x3b\xcb\xb7\x5b\xcb\x57\xa6\xd7\x6e\x3e\x25\xca\xee\x9e\xa3\x6b\x2d\x19\x61\x4d\xb3\x7b\x0d\x64\x2f\x15\x26\x6a\x6c\x05\xdd\x33\xf4\x92\x33\x3c\x14\xb3\xe1\xb3\x64\xa3\x2a\xbd\x51\x79\xd3\x73\x04\x3e\xbd\x70\x17\x2e\xdc\x4e\x2c\xac\xc3\x85\xbb\x44\x15\xfe\x68\x3e\x77\x9a\xe7\x45\x40\x97\xd9\x2a\xfc\xc7\x59\x6a\x92\xc1\x99\x67\x20\x79\x06\x98\x67\xc0\x59\x06\x1a\xed\x39\xc9\xa0\x53\x24\x51\xe2\xca\xed\x50\xe2\x7c\x7d\xdc\x8c\x19\x1b\x69\x13\xa3\x69\x71\x1f\x9a\xd5\x98\x47\x46\xc2\xb5\x97\xcf\xd5\x4d\xbf\x2b\xfa\x45\xec\x1f\xd5\x97\xab\xc4\xf2\x8d\x25\x7e\xf0\xa3\xf3\xf5\x62\x83\x52\x7c\x25\xd7\x69\xf2\x36\x4d\xfe\x7e\xf5\x19\x79\x92\x86\x66\x19\x50\x36\x11\xa5\x8a\x28\x75\x44\xd9\x46\x94\xb8\xe5\xae\x6b\x23\x43\xe0\xd3\x8d\xf9\xae\xcc\x77\x6d\xbe\xb7\xe6\x7b\x07\xdd\xbc\xf8\x8b\x18\xce\xa0\x7b\x30\x6a\xa5\xa6\x1b\x26\xcc\x70\xea\x0c\x39\x17\x36\x9b\x64\x0e\xcb\xd4\xe0\x73\x5b\x0f\xbe\xdf\xa4\x4f\x58\xa4\xeb\x20\x64\x1c\x1e\xad\x8c\x45\xc3\xa4\x27\x05\x27\xd4\x4e\xac\xc1\xfa\x5e\xfd\x82\xf9\xc9\xc7\xf2\x0c\x27\x88\x06\x98\x46\x9c\xb5\xf3\x43\x94\x5f\x92\x60\x1b\x20\x68\x54\x9a\x80\x6c\xd6\x8a\xc7\xf5\x40\xdf\x18\x5f\x85\x2e\x8e\x17\x0f\x35\xb2\x30\x96\xa5\x30\x70\x5e\x78\x52\x5e\xa9\x39\x7e\x9d\xe6\x63\x0f\x71\xeb\xbf\x6d\xad\x36\xaa\xeb\xb1\xb1\x62\xf3\xb9\x63\x0c\x4c\x34\xb4\x78\xc3\x57\x58\xea\x73\xaf\x37\xd7\xb4\xc5\xfb\x31\x64\x97\x69\x15\x63\x62\x0f\xa5\xd3\xb3\xc6\xdd\x33\xe8\x2d\x34\xee\x36\xc9\xab\x12\x8d\xd0\xd4\x5a\xf9\xc3\x46\xfc\x98\x6c\xd3\xd7\xbd\xde\x1f\x3e\x0d\x7f\x69\x5b\x34\x0d\x73\x3b\x9d\xc2\xd7\x06\x3f\x63\xa5\x19\xa9\x11\x67\x47\xd1\x98\xf3\xd7\x32\xf3\x76\xdd\x33\x94\x55\x10\xf4\xa3\x7a\x38\x42\xfb\xdf\xd7\x81\x06\x05\xdb\xd5\x6e\x75\xb0\x7a\x62\xdd\x12\xee\x49\x5d\x1f\xc4\xec\x74\xf4\x96\x3e\xe7\x4f\x0c\x6b\xda\x40\x59\x14\xff\xf7\x56\xf6\x1d\x12\x0f\x07\x85\x4e\x64\xc1\x29\x7e\x38\x3f\x1d\xb8\x7c\x6a\x80\x32\x8c\x89\x98\x92\xf4\x68\x1e\xe6\x9d\x15\x56\x8a\xa9\x3d\x0f\x5c\x22\x1d\xfa\x2f\xad\x88\xeb\xd9\xc1\x83\x43\x71\x4d\x38\xf8\xa3\x5b\x87\x2e\xb8\xa0\xb3\x96\x53\xd6\x18\x5b\x7c\x44\x17\x2b\x3b\x21\x2d\x80\xa7\xe5\x04\x0d\xc7\x0f\xa9\x69\xf2\xce\xe9\x76\xed\x34\xb7\xf7\xcd\xbe\xad\x6b\xb9\xab\x80\x49\x85\xbc\x25\x42\x93\x25\x77\x36\xd3\x20\x47\xfa\x4e\xee\x12\x45\xc2\xfa\xcd\x3c\x8f\x0e\x7e\x72\x9d\xea\xa6\xb8\xdd\xf2\x8e\x42\x09\x67\x8e\xad\x78\x8c\x82\x75\xb2\xd5\x50\x24\xdf\x1a\x51\xbb\xc9\xf7\x06\xb4\x98\x42\xd3\x6c\x37\xaf\xcb\x1c\x96\xab\x84\x9a\xb4\x31\xc3\xc4\x02\xc3\x2e\x85\x4f\x5d\xce\x92\x95\x9b\xcd\xd3\x46\xcf\x67\xe6\xb8\x7f\x80\x6e\x1a\xab\x98\x77\x69\x04\x78\x77\x9d\x2b\x75\x9f\x05\xef\x6d\xa2\x63\x2e\xdd\x62\x75\x5a\x89\x49\x06\x5a\x27\x73\x6b\x33\x31\xe3\x7a\x53\xa1\x99\x84\xf2\xbe\x43\x2d\x69\x40\xc8\x27\x85\xba\xd9\xa9\x83\xa0\xe1\x6f\x6e\xb6\xf2\xe6\x9d\x51\x4a\xae\x10\x66\xe7\xbe\x81\xb0\xd1\x77\x8a\x84\x57\x59\x0b\xe6\xb1\x48\xf7\x4e\x91\x58\x71\xff\x36\xc4\xbd\x42\xd1\x0a\x89\xbe\x43\x8a\x04\xb7\xfa\x0f\x94\x1d\x29\x37\xae\xf5\xef\x69\x16\x1b\x3a\x3b\x20\xb9\xc7\xb7\x6a\xfa\xa7\x97\x5f\xd2\x61\xea\x57\x4b\x7f\x7e\x2a\x12\xf7\x70\x73\x90\xff\x77\x2d\xb3\x49\x31\xfc\xe7\x25\x46\x6c\x66\x14\x03\xe9\xd0\xf9\xf6\xee\xf3\xcf\x97\xdf\xdf\xfe\x0e\x00\x00\xff\xff\xa4\xcf\x30\x08\x88\x1b\x00\x00")

func githubMarkdownHtmlBytes() ([]byte, error) {
	return bindataRead(
		_githubMarkdownHtml,
		"github-markdown.html",
	)
}

func githubMarkdownHtml() (*asset, error) {
	bytes, err := githubMarkdownHtmlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github-markdown.html", size: 7048, mode: os.FileMode(420), modTime: time.Unix(1480290143, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github-markdown.html": githubMarkdownHtml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"github-markdown.html": &bintree{githubMarkdownHtml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

