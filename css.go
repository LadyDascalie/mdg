// Code generated by go-bindata.
// sources:
// github-markdown.css
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _githubMarkdownCss = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\xd4\x58\xcf\x92\xe3\x26\x13\xbf\xfb\x29\xfa\xab\xad\xaf\x2a\x7f\xa4\x29\xc9\x92\xbc\x1b\x6d\xd5\x5e\x72\xc9\x6b\x60\x81\x0d\x35\x18\x08\xc2\x63\x4f\x52\xf3\xee\x29\x40\xb2\x04\xc2\x63\x6d\x32\x39\xc4\x73\x19\x37\xdd\xcd\xaf\x9b\xee\x5f\x83\xf7\x12\xbf\xc2\x9f\x1b\x80\x83\x14\x26\x3f\xa0\x13\xe3\xaf\x2d\xfc\x46\xf8\x0b\x31\xac\x43\x19\x20\xcd\x10\xcf\xa0\x47\xa2\xcf\x7b\xa2\xd9\xe1\xeb\xa8\xdc\xb3\x3f\x48\x0b\x65\xad\xae\x56\xc4\x99\x20\x39\x25\xec\x48\x4d\x0b\xe5\xd3\xce\xca\x14\xc2\x98\x89\x63\x6e\xa4\x6a\xa1\x2c\xbc\xe2\x28\xdc\x4b\x63\xe4\x69\x92\xef\x51\xf7\x7c\xd4\xf2\x2c\x70\xde\x49\x2e\x75\x0b\x17\xca\x0c\x99\x99\xb4\x50\x0d\xba\x83\xc2\xa7\xaa\xaa\xbe\x6e\xde\x36\x1b\x17\xc5\x37\xf8\xa9\x3d\x30\xdd\x9b\xbc\xa3\x8c\x63\x17\xd5\x09\xe9\x23\x13\x1e\x40\x01\xff\x63\x27\x25\xb5\x41\xc2\x84\x56\x1c\xa5\x8c\x46\x80\x0b\x3b\xe4\xb4\x46\x0c\x75\xf9\xa5\xfa\xb5\xb6\xa8\x0c\xb9\x9a\x1c\x93\x4e\x6a\x64\x98\x14\x2d\x08\x29\x88\xb7\x78\x42\xfb\x9e\x08\x13\x18\x76\x5d\x51\x14\xc5\xb8\x2e\x3a\x2a\xb5\x5b\xc7\xac\x57\x1c\xbd\xb6\xb0\xe7\xb2\x7b\x9e\xa7\x8c\x93\x83\x99\x92\x30\xc0\xf4\xc2\xfc\x96\x9a\xb3\xee\xad\x7b\x25\x99\x30\x44\x3b\x73\xd9\x33\x0f\x08\xed\x7b\xc9\xcf\x3e\xa9\x3e\x27\xee\xe8\x9c\x07\xf7\xef\x2d\x66\x07\x8b\x96\x19\xd0\x6d\x06\xb4\xca\x80\xd6\x19\xd0\x26\x03\xba\x9b\xe5\xa8\x85\x6d\xa1\xae\x50\xc4\x87\x3b\x78\x73\x65\x72\x19\x6a\x62\x2f\x39\xb6\xc2\xfc\x42\xf6\xcf\xcc\xe4\xbe\x86\x4e\x52\x1a\xea\x2c\x90\x30\x0c\x71\x86\x7a\x82\xe7\x71\xd8\xa4\x86\x41\x68\xc2\x91\x61\x2f\x3e\xb3\x74\x3b\x3f\xf3\x0c\x68\xf9\xde\x77\xf8\x79\x88\x27\x52\xaa\xa3\xef\x4d\xf4\x7d\xf7\x7e\x61\x2d\x6a\x7d\x4c\x5f\x4b\xe5\x0b\xd1\x30\x1e\xaf\xcd\xe6\x52\x54\x2d\x45\xf5\x52\xd4\x2c\x45\xbb\x48\xe4\x80\xdd\x2f\x42\x5a\x82\x31\x36\x23\xd0\x49\x4c\xa6\xa6\xf7\x7d\xcc\x04\x25\x9a\x99\x21\xa9\x5e\x73\xfb\x58\xb3\xf2\x9a\xd5\x63\xcd\xda\x6b\xd6\x8f\x35\x1b\xaf\xd9\x3c\xd6\xdc\x79\xcd\xdd\x63\xcd\x32\x5e\xdd\x7e\x09\xa8\x64\xcf\x91\xed\x35\x1f\x7c\xac\x3a\x50\xdc\x5e\x6a\x4c\xf4\x44\x5c\xea\x0a\xbd\xe4\x0c\xdb\x56\xb6\x9f\xb4\xbb\x2a\x76\x57\xba\x9d\x7d\x4a\xe2\xa5\xdd\xb8\xd4\x2c\x96\xea\x71\x69\x17\xb0\xc8\x67\xf7\x49\x92\xf2\xdb\x66\xa3\x32\xcf\x22\xbf\x9f\xa5\x21\x19\x9c\x79\x06\x92\x67\x80\x79\x06\x9c\x65\x60\xd0\x9e\x93\x0c\x94\x26\x41\x53\x97\x8d\x6d\x6a\xbf\x9b\xaf\xaa\x89\x9c\xdb\x79\xb4\x3e\x23\x96\x22\x7d\x95\x01\xdc\x26\xc0\x92\x0f\x26\xc6\x0d\x9b\x76\x75\x3f\x8d\xd6\xe5\x07\x5a\x5b\x42\xf8\x6e\x17\x11\x7d\x8c\xe2\x3a\x2d\x6e\xd2\xe2\xbf\xc7\x29\x28\xb0\xb2\x04\x1d\x49\xb6\x0b\x49\xb5\x90\xd4\x0b\x49\xb3\x90\xec\xbe\x83\xe6\x40\x39\xb2\x50\x8e\x08\x94\x6b\x72\xe5\x1a\x58\xb9\xe6\x54\x29\x57\x6f\x9b\x0d\x67\xa0\x9e\xdc\xa6\xe1\xdc\x63\xc2\x5d\x26\x86\xf1\xf7\xb6\xd9\xf8\xb2\x75\x4a\xa9\x51\xe8\x34\x20\xcc\xb2\x0c\x05\x77\x10\x58\xb3\x69\xf8\x7b\xab\x07\x97\x01\x67\x87\x03\x30\x33\x29\x36\xe9\xbe\xbd\x33\x0b\xbd\x9e\x79\xe5\x96\xae\x0c\xe2\xac\x5b\x0e\xd1\xb0\x29\xa1\x19\x22\x76\x9b\x2d\x42\x4c\x22\xfa\xb6\x26\x15\x37\xd5\x95\xf1\x63\x1c\x50\x46\x61\x2f\x01\x4d\xdc\xf4\x83\xe8\x66\xb1\x1a\x09\x5e\x8b\x64\x62\x37\xcf\x53\x9e\xa2\x7d\x75\xd4\x13\x41\x63\xf7\x49\x82\x5b\x52\x69\xe8\x76\x15\xe6\x50\x7f\x0d\x70\x47\xbd\x89\x33\xf3\x72\xa3\xe7\xe1\xf8\xfb\x73\x6a\xdc\xbc\x73\x69\xbe\x9d\x4c\x82\x87\xc7\x4d\x5a\x61\xa8\x07\xfa\xc3\x56\xfc\x18\x31\xfd\xe8\xf1\xd3\xe1\x8b\xfd\x0b\x0c\xc1\xd0\xa9\xd0\xe3\xaa\x1e\xa7\x42\x12\xb1\xbb\x9f\x20\xce\x8e\xa2\x75\x17\xcf\xfb\x50\x77\xea\x0a\x65\x35\xd4\xcf\xb4\x31\x9e\x65\xe6\xdf\xda\x83\x46\x6c\x32\xdf\x7d\x45\x35\x04\x8e\xe6\xfc\x12\xf8\x59\x53\x25\xec\x74\x1c\x16\xaf\xf9\x85\x61\x43\xed\x7b\xa9\xf8\xbf\x5b\xeb\x15\x12\x4f\x07\x8d\x4e\xe4\xce\xb3\xc1\x5e\x0e\x0f\x5c\x5e\x5a\xa0\x0c\x63\x22\x62\xab\x6f\x60\xbf\xdc\x4b\xe7\xd4\x32\x4b\xcf\x07\x2e\x91\x99\x72\xbb\xdc\x68\x46\x5b\x95\xa3\xad\x30\xed\x9f\x7d\xe3\x0d\x11\xa1\xb3\x91\x31\x36\x87\x6c\x8c\xfe\x01\x80\x84\xe5\x2d\xb0\x8e\x13\x64\xef\x63\xd2\xd0\xe8\xe1\xe8\xde\x8e\xef\xbc\xb6\x5a\x68\x46\xe4\xe3\x06\xae\xa4\xf2\x8e\xd8\x87\xd5\xea\x9c\x47\x18\x92\xbe\x66\x27\xb1\xce\x65\x90\x5d\x9b\x3f\x9f\xe0\x79\xe1\x7b\xd7\x77\x36\x0c\xd2\x3b\x71\xb8\x3f\x89\x35\x7e\xb4\x6d\xf9\x8f\xc9\x81\x77\xf5\xcf\x52\x50\x2c\xe3\x77\x6e\xd3\x7b\xa5\xa3\x7f\xe0\xc0\x95\x9c\x9b\x2c\x77\x40\x0e\x0d\xac\x87\x0b\x70\xe5\x6b\x3c\x05\x3d\x5d\xbd\x93\xff\x5b\x26\x96\x31\x86\xda\xef\x9d\x42\xf0\xf3\xc0\x0a\x34\xc9\x70\x3f\xe2\x6c\xd2\xe5\x39\x6d\x67\xdf\x6e\x19\x18\x13\xd5\xe2\x76\x71\x99\x18\xc6\xb5\x9b\x70\x79\xaf\x50\x47\xec\xeb\xf6\xa2\x91\xba\x33\x75\x08\xb2\x7f\xe9\x39\x79\x9b\x6a\xb7\x29\xab\x11\x66\xe7\xbe\x85\x71\x1c\xd8\x57\xd1\xed\x5d\x79\x77\x9a\x46\x78\x94\x26\x73\x30\xe3\xb3\x68\xfe\x7e\x32\x1a\x89\x5e\x21\x4d\x86\x9f\x93\x9e\x28\x3b\x52\xee\x12\x3d\x3e\xc4\x56\xc0\xbd\x33\xfa\xe6\x37\xcf\x2a\xf5\xcb\xdc\x2f\x71\x21\x8c\x3d\x1f\xce\xc4\x22\x78\xf2\xa6\x52\xf3\x5f\xc1\xe9\xcb\xcb\xfe\x37\x94\xd8\x12\x74\x70\x22\xf1\xe1\xbd\x6d\xfe\x0a\x00\x00\xff\xff\xed\x3e\xa1\x59\x24\x15\x00\x00")

func githubMarkdownCssBytes() ([]byte, error) {
	return bindataRead(
		_githubMarkdownCss,
		"github-markdown.css",
	)
}

func githubMarkdownCss() (*asset, error) {
	bytes, err := githubMarkdownCssBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "github-markdown.css", size: 5412, mode: os.FileMode(420), modTime: time.Unix(1479867804, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"github-markdown.css": githubMarkdownCss,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"github-markdown.css": &bintree{githubMarkdownCss, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

